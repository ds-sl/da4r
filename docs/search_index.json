[["public.html", "A Appendix B Public Data A.1 Introduction A.2 World Bank A.3 United Nations", " A Appendix B Public Data A.1 Introduction A.1.1 Open Data Defined by World Bank See the following URL: http://opendatatoolkit.worldbank.org The term “Open Data” has a very precise meaning. Data or content is open if anyone is free to use, re-use or redistribute it, subject at most to measures that preserve provenance and openness. The data must be , which means they must be placed in the public domain or under liberal terms of use with minimal restrictions. The data must be , which means they must be published in electronic formats that are machine readable and non-proprietary, so that anyone can access and use the data using common, freely available software tools. Data must also be publicly available and accessible on a public server, without password or firewall restrictions. To make Open Data easier to find, most organizations create and manage Open Data catalogs. A.1.2 A List of Open Data Catalogue A.1.2.1 International Institutions World Bank: New Ways of Looking at Poverty Open Data: https://data.worldbank.org World Development Indicators: http://datatopics.worldbank.org/world-development-indicators/ UN Data: http://data.un.org WHO Data: https://www.who.int/gho/en/ OECD: https://data.oecd.org European Union: http://data.europa.eu/euodp/en/home African Union: https://au.int/en/ea/statistics A.1.2.2 Goverments United States: https://www.data.gov United Kingdom: https://data.gov.uk China: http://www.stats.gov.cn/english/ Japan: https://www.data.go.jp/list-of-database/?lang=en A.1.2.3 Other Open Public Data Google Public Data Explore: https://www.google.com/publicdata/directory?hl=en_US Google Dataset Search: https://toolbox.google.com/datasetsearch Google Trends: https://trends.google.com/trends/?geo=US Open Knowledge Foundation: https://okfn.org Global Open Data Index: https://index.okfn.org A global, non-profit network that promotes and shares information at no charge, including both content and data. It was founded by Rufus Pollock on 20 May 2004 and launched on 24 May 2004 in Cambridge, UK. It is incorporated in England and Wales as a company limited by guarantee. (Wikipedia) Our World in Data: https://ourworldindata.org A scientific online publication that focuses on large global problems such as poverty, disease, hunger, climate change, war, existential risks, and inequality. The publication’s founder is the social historian and development economist Max Roser. The research team is based at the University of Oxford. (Wikipedia) A.1.2.4 Financial Data A.1.2.4.1 Quandl Quandl R package: https://cran.r-project.org/web/packages/Quandl/Quandl.pdf Quandl: Bitcoin Market Price USD A.1.2.4.2 Quantmod quantmod: Quantitative Financial Modelling &amp; Trading Framework for R R package `quantmod: https://cran.r-project.org/web/packages/quantmod/quantmod.pdf quantmod R documentation Yahoo Finance Data Using quantmod Reference: CryptCurrency Bitcoin Analysis Using quantmod A.1.3 Examples A.1.3.1 Florence Nightingale (1820 – 1910) Florence Nightingale was an English social reformer, statistician and the founder of modern nursing. (wikipedia) Diagram of the Causes of Motality in the Army in the East Insights in Social History, Books and Research by Hugh Small Florence Nightingale’s Statistical Diagrams: https://www.york.ac.uk/depts/maths/histstat/small.htm Florence Nightingale Museum https://www.florence-nightingale.co.uk/learning/ Meet Miss Nightingale: https://www.florence-nightingale.co.uk/meet-miss-nightingale/ Book: A contribution to the sanitary history of the British army during the late war with Russia Project Gutenberg: Books by Nightingale, Florence Notes on Nursing: What It Is, and What It Is Not Nightingale: The Journal of the Data Visualization Society, Medium A.1.3.2 Hans Rosling (1948 – 2017) Hans Rosling was a Swedish physician, academic, and public speaker. He was a professor of international health at Karolinska Institute[4] and was the co-founder and chairman of the Gapminder Foundation, which developed the Trendalyzer software system. (wikipedia) Books: Factfulness: Ten Reasons We’re Wrong About The World - And Why Things Are Better Than You Think, 2018 How I Learned to Understand the World: A Memoir, 2020 Gapminder: https://www.gapminder.org You are probably wrong about: Upgrade Your World View Bubble Chart: Income vs Life Expectancy over time, 1800 - 2020 How many variables? Videos: The best stats you’ve ever seen, Hans Rosling Google Public Data: Example: World Development Indicator A.1.3.2.1 Factfulness is … From the book recognizing when a decision feels urgent and remembering that it rarely is. To control the urgency instinct, take small steps. Take a breath. When your urgency instinct is triggered, your other instincts kick in and your analysis shuts down. Ask for more time and more information. It’s rarely now or never and it’s rarely either/or. Insist on the data. If something is urgent and important, it should be measured. Beware of data that is relevant but inaccurate, or accurate but irrelevant. Only relevant and accurate data is useful. Beware of fortune-tellers. Any prediction about the future is uncertain. Be wary of predictions that fail to acknowledge that. Insist on a full range of scenarios, never just the best or worst case. Ask how often such predictions have been right before. Be wary of drastic action. Ask what the side effects will be. Ask how the idea has been tested. Step-by-step practical improvements, and evaluation of their impact, are less dramatic but usually more effective. A.2 World Bank A.2.1 About World Bank: https://www.worldbank.org Who we are: To end extreme poverty: By reducing the share of the global population that lives in extreme poverty to 3 percent by 2030. To promote shared prosperity: By increasing the incomes of the poorest 40 percent of people in every country. World Bank Open Data: https://data.worldbank.org A.2.2 WDI - World Development Indicaters World Development Indicators (WDI): the World Bank’s premier compilation of cross-country comparable data on development. Poverty and Inequality People Environment Economy States and Markets Global Links A.2.3 R Package WDI WDI: World Development Indicators and Other World Bank Data Search and download data from over 40 databases hosted by the World Bank, including the World Development Indicators (‘WDI’), International Debt Statistics, Doing Business, Human Capital Index, and Sub-national Poverty indicators. Version: 2.7.4 Materials: README - usage NEWS - version history Published: 2021-04-06 Reference manual: WDI.pdf A.2.3.1 Function WDI: World Development Indicators (World Bank) Description: Downloads the requested data by using the World Bank’s API, parses the resulting XML file, and formats it in long country-year format. Usage WDI( country = &quot;all&quot;, indicator = &quot;NY.GDP.PCAP.KD&quot;, start = 1960, end = 2020, extra = FALSE, cache = NULL, latest = NULL, language = &quot;en&quot; ) Arguments country: Vector of countries (ISO-2 character codes, e.g. “BR”, “US”, “CA”) for which the data is needed. Using the string “all” instead of individual iso codes pulls data for every available country. https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 https://www.nationsonline.org/oneworld/country_code_list.htm indicator: Character vector of indicators codes. See the WDIsearch() function. If you supply a named vector, the indicators will be automatically renamed: ‘c(’women_private_sector’ = ‘BI.PWK.PRVS.FE.ZS’)’ start: Start date, usually a year in integer format. Must be 1960 or greater. end: End date, usually a year in integer format. Must be greater than the ‘start’ argument. extra: TRUE returns extra variables such as region, iso3c code, and incomeLevel cache: NULL (optional) a list created by WDIcache() to be used with the extra=TRUE argument Value: Data frame with country-year observations. You can extract a data.frame with indicator names and descriptive labels by inspecting the label attribute of the resulting data.frame: attr(dat, 'label') A.2.3.2 Function WDIsearch Search names and descriptions of available WDI series Description Data frame with series code, name, description, and source for the WDI series which match the given criteria Usage WDIsearch(string = “gdp”, field = “name”, short = TRUE, cache = NULL) Arguments string: Character string. Search for this string using grep with ignore.case=TRUE. field: Character string. Search this field. Admissible fields: ‘indicator’, ‘name’, ‘description’, ‘sourceDatabase’, ‘sourceOrganization’ short; TRUE: Returns only the indicator’s code and name. FALSE: Returns the indicator’s code, name, description, and source. cache; Data list generated by the WDIcache function. If omitted, WDIsearch will search a local list of series. Value; Data frame with code, name, source, and description of all series which match the criteria. A.2.4 The First Example A.2.4.1 Setup In this R Notebook, we will use the following packages. Istall them before you compile this R Notebook. tidyverse Package, a collection of packages for data science WDI Package for World Development Indicators library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(WDI) A.2.4.2 GDP Per Capita The following is taken from the usage. WDI( country = &quot;all&quot;, indicator = &quot;NY.GDP.PCAP.KD&quot;, start = 1960, end = 2020, extra = FALSE, cache = NULL, latest = NULL, language = &quot;en&quot; ) WDIsearch(string = &quot;NY.GDP.PCAP.KD&quot;, field = &quot;indicator&quot;, cache = NULL) ## indicator name ## [1,] &quot;NY.GDP.PCAP.KD&quot; &quot;GDP per capita (constant 2015 US$)&quot; ## [2,] &quot;NY.GDP.PCAP.KD.ZG&quot; &quot;GDP per capita growth (annual %)&quot; WDIsearch(string = &quot;NY.GDP.PCAP.KD&quot;, field = &quot;indicator&quot;, short = FALSE, cache = NULL) ## indicator name ## [1,] &quot;NY.GDP.PCAP.KD&quot; &quot;GDP per capita (constant 2015 US$)&quot; ## [2,] &quot;NY.GDP.PCAP.KD.ZG&quot; &quot;GDP per capita growth (annual %)&quot; ## description ## [1,] &quot;GDP per capita is gross domestic product divided by midyear population. GDP is the sum of gross value added by all resident producers in the economy plus any product taxes and minus any subsidies not included in the value of the products. It is calculated without making deductions for depreciation of fabricated assets or for depletion and degradation of natural resources. Data are in constant 2015 U.S. dollars.&quot; ## [2,] &quot;Annual percentage growth rate of GDP per capita based on constant local currency. GDP per capita is gross domestic product divided by midyear population. GDP at purchaser&#39;s prices is the sum of gross value added by all resident producers in the economy plus any product taxes and minus any subsidies not included in the value of the products. It is calculated without making deductions for depreciation of fabricated assets or for depletion and degradation of natural resources.&quot; ## sourceDatabase ## [1,] &quot;World Development Indicators&quot; ## [2,] &quot;World Development Indicators&quot; ## sourceOrganization ## [1,] &quot;World Bank national accounts data, and OECD National Accounts data files.&quot; ## [2,] &quot;World Bank national accounts data, and OECD National Accounts data files.&quot; df &lt;- as_tibble(WDI( country = c(&quot;CN&quot;, &quot;IN&quot;, &quot;US&quot;, &quot;ID&quot;,&quot;PK&quot;, &quot;BR&quot;, &quot;NG&quot;, &quot;BD&quot;, &quot;RU&quot;, &quot;MX&quot;, &quot;JP&quot;), indicator = &quot;NY.GDP.PCAP.KD&quot;, start = 1960, end = 2020, extra = FALSE, cache = NULL, latest = NULL, language = &quot;en&quot; )) df ## # A tibble: 671 × 4 ## iso2c country NY.GDP.PCAP.KD year ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 BD Bangladesh 1620. 2020 ## 2 BD Bangladesh 1582. 2019 ## 3 BD Bangladesh 1481. 2018 ## 4 BD Bangladesh 1395. 2017 ## 5 BD Bangladesh 1323. 2016 ## 6 BD Bangladesh 1248. 2015 ## 7 BD Bangladesh 1185. 2014 ## 8 BD Bangladesh 1130. 2013 ## 9 BD Bangladesh 1078. 2012 ## 10 BD Bangladesh 1024. 2011 ## # … with 661 more rows ggplot(df) + geom_line(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + labs(title = &quot;GDP per capita (constant 2010 US$)&quot;) ## Warning: Removed 29 row(s) containing missing values (geom_path). ggplot(df) + geom_line(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + scale_y_continuous(trans=&#39;log10&#39;) + labs(title = &quot;GDP per capita (constant 2010 US$)&quot;, subtitle = &quot;Log10 Scale&quot;) ## Warning: Removed 29 row(s) containing missing values (geom_path). ggplot(df) + geom_line(aes(x = year, y = NY.GDP.PCAP.KD, color = country)) + scale_y_continuous(trans=&#39;log10&#39;) + facet_wrap(vars(country)) + labs(title = &quot;GDP per capita (constant 2010 US$)&quot;, subtitle = &quot;Log10 Scale&quot;) ## Warning: Removed 29 row(s) containing missing values (geom_path). ### More Examples A.2.4.3 Search Indicators Related to “GDP” as_tibble(WDIsearch(string = &quot;gdp&quot;, field = &quot;name&quot;, cache = NULL)) ## # A tibble: 540 × 2 ## indicator name ## &lt;chr&gt; &lt;chr&gt; ## 1 5.51.01.10.gdp &quot;Per capita GDP growth&quot; ## 2 6.0.GDP_current &quot;GDP (current $)&quot; ## 3 6.0.GDP_growth &quot;GDP growth (annual %)&quot; ## 4 6.0.GDP_usd &quot;GDP (constant 2005 $)&quot; ## 5 6.0.GDPpc_constant &quot;GDP per capita, PPP (constant 2011 international $) &quot; ## 6 BG.GSR.NFSV.GD.ZS &quot;Trade in services (% of GDP)&quot; ## 7 BG.KAC.FNEI.GD.PP.ZS &quot;Gross private capital flows (% of GDP, PPP)&quot; ## 8 BG.KAC.FNEI.GD.ZS &quot;Gross private capital flows (% of GDP)&quot; ## 9 BG.KLT.DINV.GD.PP.ZS &quot;Gross foreign direct investment (% of GDP, PPP)&quot; ## 10 BG.KLT.DINV.GD.ZS &quot;Gross foreign direct investment (% of GDP)&quot; ## # … with 530 more rows A.2.4.4 Population WDIsearch(string = &quot;Population, Total&quot;, field = &quot;name&quot;, cache = NULL) ## indicator name ## [1,] &quot;JI.POP.URBN.ZS&quot; &quot;Urban population, total (% of total population)&quot; ## [2,] &quot;SP.POP.TOTL&quot; &quot;Population, total&quot; WDIsearch(string = &quot;SP.POP.TOTL&quot;, field = &quot;indicator&quot;, cache = NULL) ## indicator name ## [1,] &quot;SP.POP.TOTL&quot; &quot;Population, total&quot; ## [2,] &quot;SP.POP.TOTL.FE.IN&quot; &quot;Population, female&quot; ## [3,] &quot;SP.POP.TOTL.FE.ZS&quot; &quot;Population, female (% of total population)&quot; ## [4,] &quot;SP.POP.TOTL.ICP&quot; &quot;SP.POP.TOTL.ICP:Population&quot; ## [5,] &quot;SP.POP.TOTL.ICP.ZS&quot; &quot;SP.POP.TOTL.ICP.ZS:Population shares (World=100)&quot; ## [6,] &quot;SP.POP.TOTL.MA.IN&quot; &quot;Population, male&quot; ## [7,] &quot;SP.POP.TOTL.MA.ZS&quot; &quot;Population, male (% of total population)&quot; ## [8,] &quot;SP.POP.TOTL.ZS&quot; &quot;Population (% of total)&quot; A.2.4.5 More Than One Indicator dfp &lt;- as_tibble(WDI( country = c(&quot;CN&quot;, &quot;IN&quot;, &quot;US&quot;, &quot;ID&quot;,&quot;PK&quot;, &quot;BR&quot;, &quot;NG&quot;, &quot;BD&quot;, &quot;RU&quot;, &quot;MX&quot;, &quot;JP&quot;), indicator = c(&quot;NY.GDP.PCAP.KD&quot;,&quot;SP.POP.TOTL&quot;), start = 1960, end = 2020, extra = FALSE, cache = NULL, latest = NULL, language = &quot;en&quot; )) dfp ## # A tibble: 671 × 5 ## iso2c country year NY.GDP.PCAP.KD SP.POP.TOTL ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BD Bangladesh 1960 463. 48013505 ## 2 BD Bangladesh 1961 478. 49362834 ## 3 BD Bangladesh 1962 490. 50752150 ## 4 BD Bangladesh 1963 474. 52202008 ## 5 BD Bangladesh 1964 511. 53741721 ## 6 BD Bangladesh 1965 504. 55385114 ## 7 BD Bangladesh 1966 501. 57157651 ## 8 BD Bangladesh 1967 476. 59034250 ## 9 BD Bangladesh 1968 505. 60918452 ## 10 BD Bangladesh 1969 497. 62679765 ## # … with 661 more rows ggplot(dfp) + geom_line(aes(x = year, y = SP.POP.TOTL, color = country)) + labs(title = &quot;Population, total&quot;) ggplot(dfp) + geom_line(aes(x = year, y = SP.POP.TOTL, color = country)) + scale_y_continuous(trans=&#39;log10&#39;) + labs(title = &quot;Population, total&quot;, subtitle = &quot;Log10 Scale&quot;) A.2.4.5.1 All Countries df_gdp_all &lt;- as_tibble(WDI( country = &quot;all&quot;, indicator = c(&quot;NY.GDP.PCAP.KD&quot;,&quot;SP.POP.TOTL&quot;), start = 1960, end = 2020, extra = FALSE, cache = NULL, latest = NULL, language = &quot;en&quot; )) df_gdp_all ## # A tibble: 16,226 × 5 ## iso2c country year NY.GDP.PCAP.KD SP.POP.TOTL ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1A Arab World 1960 NA 92197715 ## 2 1A Arab World 1961 NA 94724540 ## 3 1A Arab World 1962 NA 97334438 ## 4 1A Arab World 1963 NA 100034191 ## 5 1A Arab World 1964 NA 102832792 ## 6 1A Arab World 1965 NA 105736428 ## 7 1A Arab World 1966 NA 108758634 ## 8 1A Arab World 1967 NA 111899335 ## 9 1A Arab World 1968 NA 115136161 ## 10 1A Arab World 1969 NA 118437193 ## # … with 16,216 more rows df_gdp_all %&gt;% filter(year == 2020) %&gt;% arrange(desc(SP.POP.TOTL)) ## # A tibble: 266 × 5 ## iso2c country year NY.GDP.PCAP.KD SP.POP.TOTL ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1W World 2020 10549. 7763932702 ## 2 ZT IDA &amp; IBRD total 2020 5017. 6571053159 ## 3 XO Low &amp; middle income 2020 4862. 6494812232 ## 4 XP Middle income 2020 5341. 5811279241 ## 5 XF IBRD only 2020 6290. 4862446431 ## 6 V2 Early-demographic dividend 2020 3374. 3332103561 ## 7 XN Lower middle income 2020 2297. 3318682068 ## 8 XT Upper middle income 2020 9395. 2492597173 ## 9 Z4 East Asia &amp; Pacific 2020 11136. 2361517682 ## 10 V3 Late-demographic dividend 2020 9711. 2316803603 ## # … with 256 more rows df_gdp_all %&gt;% filter(year == 2020) %&gt;% arrange(NY.GDP.PCAP.KD) ## # A tibble: 266 × 5 ## iso2c country year NY.GDP.PCAP.KD SP.POP.TOTL ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BI Burundi 2020 271. 11890781 ## 2 MW Malawi 2020 394. 19129955 ## 3 CF Central African Republic 2020 415. 4829764 ## 4 MG Madagascar 2020 442. 27691019 ## 5 SO Somalia 2020 445. 15893219 ## 6 CD Congo, Dem. Rep. 2020 505. 89561404 ## 7 NE Niger 2020 523. 24206636 ## 8 AF Afghanistan 2020 530. 38928341 ## 9 MZ Mozambique 2020 575. 31255435 ## 10 LR Liberia 2020 616. 5057677 ## # … with 256 more rows df_gdp_all %&gt;% filter(year == 2020) %&gt;% arrange(desc(NY.GDP.PCAP.KD)) ## # A tibble: 266 × 5 ## iso2c country year NY.GDP.PCAP.KD SP.POP.TOTL ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MC Monaco 2020 159222. 39244 ## 2 LU Luxembourg 2020 104879. 630419 ## 3 BM Bermuda 2020 99729. 63893 ## 4 CH Switzerland 2020 85685. 8636561 ## 5 IE Ireland 2020 78733. 4985674 ## 6 KY Cayman Islands 2020 77959. 65720 ## 7 NO Norway 2020 75017. 5379475 ## 8 SG Singapore 2020 58982. 5685807 ## 9 US United States 2020 58060. 331501080 ## 10 AU Australia 2020 58030. 25693267 ## # … with 256 more rows df_gdp_all %&gt;% filter(year == 2020) %&gt;% mutate(GDP = NY.GDP.PCAP.KD * SP.POP.TOTL) %&gt;% arrange(desc(GDP)) ## # A tibble: 266 × 6 ## iso2c country year NY.GDP.PCAP.KD SP.POP.TOTL GDP ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1W World 2020 10549. 7763932702 8.19e13 ## 2 XD High income 2020 40336. 1240684527 5.00e13 ## 3 OE OECD members 2020 35869. 1372980201 4.92e13 ## 4 V4 Post-demographic dividend 2020 41227. 1117278019 4.61e13 ## 5 ZT IDA &amp; IBRD total 2020 5017. 6571053159 3.30e13 ## 6 XO Low &amp; middle income 2020 4862. 6494812232 3.16e13 ## 7 XP Middle income 2020 5341. 5811279241 3.10e13 ## 8 XF IBRD only 2020 6290. 4862446431 3.06e13 ## 9 Z4 East Asia &amp; Pacific 2020 11136. 2361517682 2.63e13 ## 10 XT Upper middle income 2020 9395. 2492597173 2.34e13 ## # … with 256 more rows A.2.4.6 Gender as_tibble(WDIsearch(string = &quot;Gender&quot;, field = &quot;name&quot;, cache = NULL)) ## # A tibble: 382 × 2 ## indicator name ## &lt;chr&gt; &lt;chr&gt; ## 1 2.3_GIR.GPI &quot;Gender parity index for gross intake ratio in grade 1&quot; ## 2 2.6_PCR.GPI &quot;Gender parity index for primary completion rate &quot; ## 3 5.51.01.07.gender &quot;Gender equality&quot; ## 4 BI.EMP.PWRK.PB.FE.ZS &quot;Public sector employment, as a share of paid employmen… ## 5 BI.EMP.PWRK.PB.MA.ZS &quot;Public sector employment, as a share of paid employmen… ## 6 BI.EMP.TOTL.PB.FE.ZS &quot;Public sector employment, as a share of total employme… ## 7 BI.EMP.TOTL.PB.MA.ZS &quot;Public sector employment, as a share of total employme… ## 8 BI.WAG.PREM.PB.FE &quot;Public sector wage premium, by gender: Female (compare… ## 9 BI.WAG.PREM.PB.FM &quot;P-Value: Public sector wage premium, by gender (compar… ## 10 BI.WAG.PREM.PB.FM.ED &quot;P-Value: Gender wage premium in the public sector, by … ## # … with 372 more rows as_tibble(WDIsearch(string = &quot;Females&quot;, field = &quot;name&quot;, cache = NULL)) ## # A tibble: 69 × 2 ## indicator name ## &lt;chr&gt; &lt;chr&gt; ## 1 BI.PWK.PRVS.CK.FE.ZS Females, as a share of private paid employees by occupa… ## 2 BI.PWK.PRVS.EO.FE.ZS Females, as a share of private paid employees by occupa… ## 3 BI.PWK.PRVS.FE.Q1.ZS Females, as a share of private paid employees by wage q… ## 4 BI.PWK.PRVS.FE.Q2.ZS Females, as a share of private paid employees by wage q… ## 5 BI.PWK.PRVS.FE.Q3.ZS Females, as a share of private paid employees by wage q… ## 6 BI.PWK.PRVS.FE.Q4.ZS Females, as a share of private paid employees by wage q… ## 7 BI.PWK.PRVS.FE.Q5.ZS Females, as a share of private paid employees by wage q… ## 8 BI.PWK.PRVS.FE.ZS Females, as a share of private paid employees ## 9 BI.PWK.PRVS.PN.FE.ZS Females, as a share of private paid employees by occupa… ## 10 BI.PWK.PRVS.SN.FE.ZS Females, as a share of private paid employees by occupa… ## # … with 59 more rows WDIsearch(string = &quot;BI.PWK.PRVS.FE.ZS&quot;, field = &quot;indicator&quot;, cache = NULL) ## indicator ## &quot;BI.PWK.PRVS.FE.ZS&quot; ## name ## &quot;Females, as a share of private paid employees&quot; WDIsearch(string = &quot;BI.PWK.PUBS.FE.ZS&quot;, field = &quot;indicator&quot;, cache = NULL) ## indicator ## &quot;BI.PWK.PUBS.FE.ZS&quot; ## name ## &quot;Females, as a share of public paid employees&quot; # Rename indicators on the fly dfwe &lt;- as_tibble(WDI(country = c(&quot;CN&quot;, &quot;IN&quot;, &quot;US&quot;, &quot;ID&quot;,&quot;PK&quot;, &quot;BR&quot;, &quot;NG&quot;, &quot;BD&quot;, &quot;RU&quot;, &quot;MX&quot;, &quot;JP&quot;), indicator = c(&#39;women_private_sector&#39; = &#39;BI.PWK.PRVS.FE.ZS&#39;, &#39;women_public_sector&#39; = &#39;BI.PWK.PUBS.FE.ZS&#39;))) dfwe ## # A tibble: 231 × 5 ## iso2c country year women_private_sector women_public_sector ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BD Bangladesh 2000 NA NA ## 2 BD Bangladesh 2001 NA NA ## 3 BD Bangladesh 2002 NA NA ## 4 BD Bangladesh 2003 0.193 0.231 ## 5 BD Bangladesh 2004 NA NA ## 6 BD Bangladesh 2005 NA NA ## 7 BD Bangladesh 2006 NA NA ## 8 BD Bangladesh 2007 NA NA ## 9 BD Bangladesh 2008 NA NA ## 10 BD Bangladesh 2009 NA NA ## # … with 221 more rows summary(dfwe, country) ## iso2c country year women_private_sector ## Length:231 Length:231 Min. :2000 Min. :0.08965 ## Class :character Class :character 1st Qu.:2005 1st Qu.:0.30555 ## Mode :character Mode :character Median :2010 Median :0.40629 ## Mean :2010 Mean :0.35629 ## 3rd Qu.:2015 3rd Qu.:0.46033 ## Max. :2020 Max. :0.58404 ## NA&#39;s :153 ## women_public_sector ## Min. :0.1285 ## 1st Qu.:0.4159 ## Median :0.5508 ## Mean :0.4679 ## 3rd Qu.:0.5760 ## Max. :0.6583 ## NA&#39;s :152 dfwe %&gt;% group_by(country) %&gt;% select(2,4,5) %&gt;% summarize(private_n = sum(is.na(women_private_sector)), private = mean(is.na(women_private_sector)), public_n = sum(is.na(women_public_sector)), public = mean(is.na(women_public_sector))) ## # A tibble: 11 × 5 ## country private_n private public_n public ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Bangladesh 17 0.810 17 0.810 ## 2 Brazil 6 0.286 6 0.286 ## 3 China 19 0.905 19 0.905 ## 4 India 17 0.810 17 0.810 ## 5 Indonesia 20 0.952 20 0.952 ## 6 Japan 21 1 21 1 ## 7 Mexico 5 0.238 5 0.238 ## 8 Nigeria 19 0.905 18 0.857 ## 9 Pakistan 13 0.619 13 0.619 ## 10 Russia 4 0.190 4 0.190 ## 11 United States 12 0.571 12 0.571 A.2.5 World Bank Country and Lending Groups and an Option extra = TRUE A.2.5.1 Review Basics: World Development Indicators: ?WDI Basic Usage WDI(country = &quot;all&quot;, indicator = &quot;NY.GDP.PCAP.KD&quot;) Vector Notation WDI(country = c(&quot;US&quot;, &quot;CN&quot;, JP&quot;), # ISO-2 codes indicator = c(&quot;gdp_pcap&quot; = &quot;NY.GDP.PCAP.KD&quot;, &quot;life_exp&quot; = &quot;SP.DYN.LE00.IN&quot;)) Use Extra WDI(country = &quot;all&quot;, indicator = c(&quot;gdp_pcap&quot; = NY.GDP.PCAP.KD&quot;, &quot;life_exp&quot; = &quot;SP.DYN.LE00.IN&quot;), extra = TRUE) extra: TRUE returns extra variables such as region, iso3c code, and incomeLevel A.2.5.2 World Bank Country and Lending Groups URL World Bank Country and Lending Groups The current classification by income in XLS format A.2.5.2.1 About CLASS.xls This table classifies all World Bank member countries (189), and all other economies with populations of more than 30,000. For operational and analytical purposes, economies are divided among income groups according to 2019 gross national income (GNI) per capita, calculated using the World Bank Atlas method. The groups are: low income, $1,035 or less; lower middle income, $1,036 - 4,045; upper middle income, $4,046 - 12,535; and high income, $12,536 or more. The effective operational cutoff for IDA eligibility is $1,185 or less. A.2.5.2.2 Geographic classifications IBRD: International Bank for Reconstruction and Development IDA: International Development Association   IDA countries are those that lack the financial ability to borrow from IBRD. IDA credits are deeply concessional—interest-free loans and grants for programs aimed at boosting economic growth and improving living conditions. IBRD loans are noncessional. Blend countries are eligible for IDA credits because of their low per capita incomes but are also eligible for IBRD because they are financially creditworthy. A.2.5.2.3 Note The term country, used interchangeably with economy, does not imply political independence but refers to any territory for which authorities report separate social or economic statistics. Income classifications set on 1 July 2020 remain in effect until 1 July 2021. Argentina, which was temporarily unclassified in July 2016 pending release of revised national accounts statistics, was classified as upper middle income for FY17 as of 29 September 2016 based on alternative conversion factors. Also effective 29 September 2016, Syrian Arab Republic is reclassified from IBRD lending category to IDA-only. On 29 March 2017, new country codes were introduced to align World Bank 3-letter codes with ISO 3-letter codes: Andorra (AND), Dem. Rep. Congo (COD), Isle of Man (IMN), Kosovo (XKX), Romania (ROU), Timor-Leste (TLS), and West Bank and Gaza (PSE). A.2.5.3 Importing Excel Files CLASS.xlsx: - copy the following link The current classification by income in XLS format readxl: https://readxl.tidyverse.org Help: read_excel, read_xls, read_xlsx url_class &lt;- &quot;https://databankfiles.worldbank.org/data/download/site-content/CLASS.xlsx&quot; download.file(url = url_class, destfile = &quot;data/CLASS.xlsx&quot;) A.2.5.3.1 Countries Let us look at the first sheet. The column names are in the 5th row. The country data starts from the 7th row. Zimbabue is at the last row. library(readxl) wb_countries_tmp &lt;- read_excel(&quot;data/CLASS.xlsx&quot;, sheet = 1, skip = 0, n_max =219) wb_countries &lt;- wb_countries_tmp %&gt;% select(country = Economy, iso3c = Code, region = Region, income = `Income group`, lending = &quot;Lending category&quot;, other = &quot;Other (EMU or HIPC)&quot;) wb_countries ## # A tibble: 218 × 6 ## country iso3c region income lending other ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Aruba ABW Latin America &amp; Caribbean High inc… &lt;NA&gt; &lt;NA&gt; ## 2 Afghanistan AFG South Asia Low inco… IDA HIPC ## 3 Angola AGO Sub-Saharan Africa Lower mi… IBRD &lt;NA&gt; ## 4 Albania ALB Europe &amp; Central Asia Upper mi… IBRD &lt;NA&gt; ## 5 Andorra AND Europe &amp; Central Asia High inc… &lt;NA&gt; &lt;NA&gt; ## 6 United Arab Emirates ARE Middle East &amp; North Africa High inc… &lt;NA&gt; &lt;NA&gt; ## 7 Argentina ARG Latin America &amp; Caribbean Upper mi… IBRD &lt;NA&gt; ## 8 Armenia ARM Europe &amp; Central Asia Upper mi… IBRD &lt;NA&gt; ## 9 American Samoa ASM East Asia &amp; Pacific Upper mi… &lt;NA&gt; &lt;NA&gt; ## 10 Antigua and Barbuda ATG Latin America &amp; Caribbean High inc… IBRD &lt;NA&gt; ## # … with 208 more rows A.2.5.3.2 Regions readxl: https://readxl.tidyverse.org Help: read_excel, read_xls, read_xlsx Regions start from the 227th row. Regions end at the 272th row. wb_regions_tmp &lt;- read_excel(&quot;data/CLASS.xlsx&quot;, sheet = 1, skip = 0, n_max =266) %&gt;% slice(-(1:220)) wb_regions &lt;- wb_regions_tmp %&gt;% select(region = Economy, iso3c = Code) %&gt;% drop_na() wb_regions ## # A tibble: 45 × 2 ## region iso3c ## &lt;chr&gt; &lt;chr&gt; ## 1 Caribbean small states CSS ## 2 Central Europe and the Baltics CEB ## 3 Early-demographic dividend EAR ## 4 East Asia &amp; Pacific EAS ## 5 East Asia &amp; Pacific (excluding high income) EAP ## 6 East Asia &amp; Pacific (IDA &amp; IBRD) TEA ## 7 Euro area EMU ## 8 Europe &amp; Central Asia ECS ## 9 Europe &amp; Central Asia (excluding high income) ECA ## 10 Europe &amp; Central Asia (IDA &amp; IBRD) TEC ## # … with 35 more rows Let us look at the second sheet. wb_groups_tmp &lt;- read_excel(&quot;data/CLASS.xlsx&quot;, sheet = &quot;Groups&quot;) # sheet = 3 wb_groups &lt;- wb_groups_tmp %&gt;% select(gcode = GroupCode, group = GroupName, iso3c = CountryCode, country = CountryName) A.2.5.4 Filtering Join Description Filtering joins filter rows from x based on the presence or absence of matches in y: semi_join() return all rows from x with a match in y. anti_join() return all rows from x without a match in y. https://dplyr.tidyverse.org/reference/filter-joins.html gdp_pcap &lt;- WDI(country = &quot;all&quot;, indicator = &quot;NY.GDP.PCAP.KD&quot;) head(gdp_pcap) ## iso2c country NY.GDP.PCAP.KD year ## 1 ZH Africa Eastern and Southern 1477.249 2021 ## 2 ZH Africa Eastern and Southern 1452.730 2020 ## 3 ZH Africa Eastern and Southern 1534.890 2019 ## 4 ZH Africa Eastern and Southern 1544.078 2018 ## 5 ZH Africa Eastern and Southern 1546.796 2017 ## 6 ZH Africa Eastern and Southern 1548.813 2016 gdp_pcap_extra &lt;- WDI(country = &quot;all&quot;, indicator = &quot;NY.GDP.PCAP.KD&quot;, extra = TRUE) head(gdp_pcap_extra) ## iso2c country NY.GDP.PCAP.KD year status lastupdated iso3c region ## 1 1A Arab World NA 1968 2022-09-16 ARB Aggregates ## 2 1A Arab World NA 1974 2022-09-16 ARB Aggregates ## 3 1A Arab World NA 1973 2022-09-16 ARB Aggregates ## 4 1A Arab World NA 1972 2022-09-16 ARB Aggregates ## 5 1A Arab World 4765.656 1977 2022-09-16 ARB Aggregates ## 6 1A Arab World 4552.617 1976 2022-09-16 ARB Aggregates ## capital longitude latitude income lending ## 1 Aggregates Aggregates ## 2 Aggregates Aggregates ## 3 Aggregates Aggregates ## 4 Aggregates Aggregates ## 5 Aggregates Aggregates ## 6 Aggregates Aggregates Compare the following: 16,226 rows = 13,054 rows (country) + 3172 rows (not country) gdp_pcap_country &lt;- gdp_pcap %&gt;% semi_join(wb_countries, by = &quot;country&quot;) head(gdp_pcap_country) ## iso2c country NY.GDP.PCAP.KD year ## 1 AF Afghanistan NA 2021 ## 2 AF Afghanistan 529.7412 2020 ## 3 AF Afghanistan 555.1390 2019 ## 4 AF Afghanistan 546.7430 2018 ## 5 AF Afghanistan 553.3551 2017 ## 6 AF Afghanistan 552.9969 2016 gdp_pcap_extra %&gt;% filter(region != &quot;Aggregates&quot;) %&gt;% slice(10) ## iso2c country NY.GDP.PCAP.KD year status lastupdated iso3c ## 1 AD Andorra 37620.35 2003 2022-09-16 AND ## region capital longitude latitude income ## 1 Europe &amp; Central Asia Andorra la Vella 1.5218 42.5075 High income ## lending ## 1 Not classified What is the difference? 13,176 rows is not equal to 13,054 rows + 183 rows gdp_pcap_extra %&gt;% filter(region != &quot;Aggregates&quot;) %&gt;% anti_join(gdp_pcap_country) %&gt;% slice(10) ## Joining, by = c(&quot;iso2c&quot;, &quot;country&quot;, &quot;NY.GDP.PCAP.KD&quot;, &quot;year&quot;) ## iso2c country NY.GDP.PCAP.KD year status lastupdated iso3c ## 1 CI Cote d&#39;Ivoire 1566.577 2003 2022-09-16 CIV ## region capital longitude latitude income ## 1 Sub-Saharan Africa Yamoussoukro -4.0305 5.332 Lower middle income ## lending ## 1 IDA gdp_pcap %&gt;% anti_join(wb_countries) %&gt;% slice(10) ## Joining, by = &quot;country&quot; ## iso2c country NY.GDP.PCAP.KD year ## 1 ZH Africa Eastern and Southern 1513.37 2012 Note: World Bank provides the WDI_csv for more information. WDICountry-Series.csv - 965,9KB WDICountry.csv - 125.8KB WDIData.csv - 193 MB WDIFootNote.csv - 61.1MB WDISeries-Time.csv - 46.1KB WDISeries.csv” - 3.5MB A.2.5.5 Join Tables There are three types of joining tables. Commands are from tidyverse packages though there is a way to do the same by Base R with appropriate arguments. Bind rows: bind_rows(), intersect(), setdiff(), union() Bind columns: bind_cols(), left_join(), right_join(), inner_join(), full_join() Filtering join: semi_join(), anti_join() https://dplyr.tidyverse.org/reference/bind.html A.2.5.6 Join Tables: Quick References https://r4ds.had.co.nz/relational-data.html#relational-data Cheatsheet: Data Transformation, pages 2 and 3. You can download it from RStudio &gt; Help. Tidyverse Homepage: Efficiently bind multiple data frames by row and column: bind_rows(), bind_cols() Set operations: intersect(), setdiff(), union() Mutating joins: left_join(), right_join(), inner_join(), full_join() Filtering joins: semi_join(), anti_join() R Studio Primers: Tidy Your Data – r4ds: Wrangle, II Reshape Data, Separate and Unite Columns, Join Data Sets A.3 United Nations ` * UN Data: https://data.un.org - Datamarts: http://data.un.org/Explorer.aspx A.3.1 Importing Data Get the URL (uniform resource locator) - copy the link url_of_data &lt;- \"https://data.un.org/--long url--.csv\" Download the file into the destfile in data folder: download.file(url = url_of_data, destfile = \"data/un_pop.csv\") Read the file: df_un_pop &lt;- read_csv(\"data/un_pop.csv\") Alternative, skip 2 and read the file using the URL. * read_csv(url) A.3.2 Example A.3.2.1 Population Population, surface area and density in PDF The followind do not look line the pdf above. df_un_pop &lt;- read_csv(&quot;https://data.un.org/_Docs/SYB/CSV/SYB64_1_202110_Population,%20Surface%20Area%20and%20Density.csv&quot;, skip = 1) ## New names: ## Rows: 7260 Columns: 7 ## ── Column specification ## ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; chr (4): ...2, Series, Footnotes, Source dbl (2): ## Region/Country/Area, Year ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -&gt; `...2` head(df_un_pop) ## # A tibble: 6 × 7 ## `Region/Country/Area` ...2 Year Series Value Footn…¹ Source ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Total, all countries … 2010 Popul… 6957. &lt;NA&gt; Unite… ## 2 1 Total, all countries … 2010 Popul… 3508. &lt;NA&gt; Unite… ## 3 1 Total, all countries … 2010 Popul… 3449. &lt;NA&gt; Unite… ## 4 1 Total, all countries … 2010 Sex r… 102. &lt;NA&gt; Unite… ## 5 1 Total, all countries … 2010 Popul… 27 &lt;NA&gt; Unite… ## 6 1 Total, all countries … 2010 Popul… 11 &lt;NA&gt; Unite… ## # … with abbreviated variable name ¹​Footnotes colnames(df_un_pop) ## [1] &quot;Region/Country/Area&quot; &quot;...2&quot; &quot;Year&quot; ## [4] &quot;Series&quot; &quot;Value&quot; &quot;Footnotes&quot; ## [7] &quot;Source&quot; un_pop_tbl &lt;- df_un_pop %&gt;% select(num = &quot;Region/Country/Area&quot;, region = &quot;...2&quot;, year = &quot;Year&quot;, series = &quot;Series&quot;, value = &quot;Value&quot;) %&gt;% pivot_wider(names_from = series, values_from = value) head(un_pop_tbl) ## # A tibble: 6 × 11 ## num region year Popul…¹ Popul…² Popul…³ Sex r…⁴ Popul…⁵ Popul…⁶ Popul…⁷ ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Total, al… 2010 6957. 3508. 3449. 102. 27 11 53.5 ## 2 1 Total, al… 2015 7380. 3721. 3659. 102. 26.2 12.2 56.7 ## 3 1 Total, al… 2019 7713. 3889. 3824. 102. 25.6 13.2 59.3 ## 4 1 Total, al… 2021 7875. 3970. 3905. 102. 25.3 13.7 60.5 ## 5 2 Africa 2010 1039. 518. 521. 99.5 41.5 5.1 35.1 ## 6 2 Africa 2015 1182. 590. 592. 99.7 41.1 5.3 39.9 ## # … with 1 more variable: `Surface area (thousand km2)` &lt;dbl&gt;, and abbreviated ## # variable names ¹​`Population mid-year estimates (millions)`, ## # ²​`Population mid-year estimates for males (millions)`, ## # ³​`Population mid-year estimates for females (millions)`, ## # ⁴​`Sex ratio (males per 100 females)`, ## # ⁵​`Population aged 0 to 14 years old (percentage)`, ## # ⁶​`Population aged 60+ years old (percentage)`, ⁷​`Population density` colnames(un_pop_tbl) &lt;- c(&quot;num&quot;, &quot;region&quot;, &quot;year&quot;, &quot;total&quot;, &quot;male&quot;, &quot;female&quot;, &quot;ratio&quot;, &quot;0-14&quot;, &quot;60+&quot;, &quot;density&quot;, &quot;area&quot;) head(un_pop_tbl) ## # A tibble: 6 × 11 ## num region year total male female ratio `0-14` `60+` density area ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 Total, all c… 2010 6957. 3508. 3449. 102. 27 11 53.5 NA ## 2 1 Total, all c… 2015 7380. 3721. 3659. 102. 26.2 12.2 56.7 136162 ## 3 1 Total, all c… 2019 7713. 3889. 3824. 102. 25.6 13.2 59.3 130094 ## 4 1 Total, all c… 2021 7875. 3970. 3905. 102. 25.3 13.7 60.5 NA ## 5 2 Africa 2010 1039. 518. 521. 99.5 41.5 5.1 35.1 NA ## 6 2 Africa 2015 1182. 590. 592. 99.7 41.1 5.3 39.9 30311 "]]
