[["eda1.html", "Chapter 2 Exploratory Data Analysis (EDA) 1 2.1 R with R Studio and/or R Studio.cloud 2.2 Practicum: Swirl and more on R Script", " Chapter 2 Exploratory Data Analysis (EDA) 1 2.1 R with R Studio and/or R Studio.cloud 2.1.1 Course Contents 2020-12-08: Introduction: About the course - An introduction to open and public data, and data science 2020-12-15: Exploratory Data Analysis (EDA) 1 [lead by hs] - R Basics with RStudio and/or RStudio.cloud; R Script, swirl 2021-12-22: Exploratory Data Analysis (EDA) 2 [lead by hs] - R Markdown; Introduction to tidyverse; RStudio Primers 2022-01-12: Exploratory Data Analysis (EDA) 3 [lead by hs] - Introduction to tidyverse; Public Data, WDI, etc 2022-01-19: Exploratory Data Analysis (EDA) 4 [lead by hs] - Introduction to tidyverse; WDI, UN, WHO, etc 2022-01-26: Exploratory Data Analysis (EDA) 5 [lead by hs] - Introduction to tidyverse; WDI, OECD, US gov, etc 2022-02-02: Inference Statistics 1 2022-02-09: Inference Statistics 2 2022-02-16: Inference Statistics 3 2022-02-23: Project Presentation 2.1.2 Learning Resources, I 2.1.2.1 Textbooks “R for Data Science” by Hadley Wickham and Garrett Grolemund: Free Online Book: https://r4ds.had.co.nz “R for Data Science: Exercise Solutions” by Jeffrey B. Arnold Free Online Book: https://jrnold.github.io/r4ds-exercise-solutions/ 2.1.2.2 Other Resources (MOOCs) edX: HarvardX Data Science - 9 courses. Textbook: “Introduction to Data Science” by Rafael A. Irizarry. Free Online Book by Rafael A. Irizarry. coursera: JHU Data Science - 10 courses. List of Companion Books: “R Programming for Data Science” by Roger Peng. Free Online Book by Roger Peng. “Exploratory Data Analysis with R” by Roger Peng. Free online Book by Roger Peng. “Report Writing for Data Science in R” by Roger Peng “Statistical Inference for Data Science” by Brian Caffo “Regression Modeling for Data Science in R” by Brian Caffo 2.1.3 EDA1: Contents What is R? Why R? the First Example What is R Studio and R Studio Cloud? Installation of R and R Studio   R Studio Basics R Studio Cloud Basics Project, R Console R Basics using an R Script {swirl}: Learn R, in R EDA: Coronavirus, the first example Assignment 1 and Assignment 2 in Moodle 2.1.4 What is R? 2.1.4.1 R (programming language), Wikipedia R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. A GNU package, the official R software environment is written primarily in C, Fortran, and R itself (thus, it is partially self-hosting) and is freely available under the GNU General Public License. 2.1.4.2 History of R and more “R Programming for Data Science” by Roger Peng Chapter 2. History and Overview of R Overview and History of R: Youtube video 2.1.5 Why R? – Responses by Hadley Wickham 2.1.5.1 r4ds: R is a great place to start your data science journey because R is an environment designed from the ground up to support data science. R is not just a programming language, but it is also an interactive environment for doing data science. To support interaction, R is a much more flexible language than many of its peers. 2.1.5.2 Why R today? When you talk about choosing programming languages, I always say you shouldn’t pick them based on technical merits, but rather pick them based on the community. And I think the R community is like really, really strong, vibrant, free, welcoming, and embraces a wide range of domains. So, if there are like people like you using R, then your life is going to be much easier. That’s the first reason. Interview: “Advice to Young (and Old) Programmers, H. Wickham” 2.1.6 The First Example plot(cars) plot(cars) # cars: Speed and Stopping Distances of Cars abline(lm(cars$dist~cars$speed)) head(cars) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 7 22 ## 5 8 16 ## 6 9 10 summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 summary(lm(cars$dist~cars$speed)) ## ## Call: ## lm(formula = cars$dist ~ cars$speed) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.069 -9.525 -2.272 9.215 43.201 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -17.5791 6.7584 -2.601 0.0123 * ## cars$speed 3.9324 0.4155 9.464 1.49e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.38 on 48 degrees of freedom ## Multiple R-squared: 0.6511, Adjusted R-squared: 0.6438 ## F-statistic: 89.57 on 1 and 48 DF, p-value: 1.49e-12 2.1.7 What is RStudio? https://rstudio.com RStudio is an integrated development environment, or IDE, for R programming. 2.1.7.1 R Studio (Wikipedia) RStudio is an integrated development environment (IDE) for R, a programming language for statistical computing and graphics. It is available in two formats: RStudio Desktop is a regular desktop application while RStudio Server runs on a remote server and allows accessing RStudio using a web browser. 2.1.7.2 R Studio Cloud https://rstudio.cloud RStudio Cloud is a lightweight, cloud-based solution that allows anyone to do, share, teach and learn data science online. 2.1.8 Installation of R and R Studio 2.1.8.1 R Installation To download R, go to CRAN, the comprehensive R archive network. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. Don’t try and pick a mirror that’s close to you: instead use the cloud mirror, https://cloud.r-project.org, which automatically figures it out for you. A new major version of R comes out once a year, and there are 2-3 minor releases each year. It’s a good idea to update regularly. 2.1.8.2 R Studio Installation Download and install it from http://www.rstudio.com/download. RStudio is updated a couple of times a year. When a new version is available, RStudio will let you know. 2.1.9 R Studio 2.1.9.1 The First Step Start R Studio Application Top Menu: File &gt; New Project &gt; New Directory &gt; New Project &gt; Directory name or Browse the directory and choose the parent directory you want to create the directory 2.1.9.2 When You Start the Project Go to the directory you created Double click _‘Directory Name’.Rproj Or, Start R Studio File &gt; Open Project (or choose from Recent Project) In this way the working directory of the session is set to the project directory and R can search releted files without difficulty (getwd(), setwd()) 2.1.10 R Studio Cloud 2.1.10.1 Cloud Free Up to 15 projects total 1 shared space (5 members and 10 projects max) 15 project hours per month Up to 1 GB RAM per project Up to 1 CPU per project Up to 1 hour background execution time 2.1.10.2 How to Start R Studio Cloud Go to https://rstudio.cloud/ Sign Up: top right Email address or Google account New Project: Project Name R Console 2.1.11 Let’s Try R Basics 2.1.11.1 R Basics Let’s Try R on R Studio and/or R Studio Cloud 2.1.11.2 R Scripts Copy a script in Moodle: basics.R In RStudio (Workspace in RStudio.cloud, Project in RStudio) choose File &gt; New File &gt; R Script and paste it. Choose File &gt; Save with a name; e.g. basics (.R will be added automatically) 2.1.11.3 Helpful Resources Cheet Sheet in RStudio: https://www.rstudio.com/resources/cheatsheets/ RStudio IED Base R Cheat Sheet ‘Quick R’ by DataCamp: https://www.statmethods.net/management 2.1.12 More on R Script: Examples 2.1.12.1 R Scripts in Moodle basics.R coronavirus.R Copy a script in Moodle: {file name}.R In RStudio (Workspace in RStudio.cloud, Project in RStudio) choose File &gt; New File &gt; R Script and paste it. Choose File &gt; Save with a name; e.g. {file names} (.R will be added automatically) 2.1.13 Practicum: R Studio Cloud (or R Studio) and R basics 2.1.13.1 Let’s Try R Basics R Studio Cloud Create an account Create a Project R Studio Basics R Basics basics.R 2.1.13.2 Basics.R The script with the outputs. ################# # # basics.R # ################ # &#39;Quick R&#39; by DataCamp may be a handy reference: # https://www.statmethods.net/management/index.html # Cheat Sheet at RStudio: https://www.rstudio.com/resources/cheatsheets/ # Base R Cheat Sheet: https://github.com/rstudio/cheatsheets/raw/main/base-r.pdf # To execute the line: Control + Enter (Window and Linux), Command + Enter (Mac) ## try your experiments on the console ## calculator 3 + 7 ## [1] 10 ### +, -, *, /, ^ (or **), %%, %/% 3 + 10 / 2 ## [1] 8 3^2 ## [1] 9 2^3 ## [1] 8 2*2*2 ## [1] 8 ### assignment: &lt;-, (=, -&gt;, assign()) x &lt;- 5 x ## [1] 5 #### object_name &lt;- value, &#39;&lt;-&#39; shortcut: Alt (option) + &#39;-&#39; (hyphen or minus) #### Object names must start with a letter and can only contain letter, numbers, _ and . this_is_a_long_name &lt;- 5^3 this_is_a_long_name ## [1] 125 char_name &lt;- &quot;What is your name?&quot; char_name ## [1] &quot;What is your name?&quot; #### Use &#39;tab completion&#39; and &#39;up arrow&#39; ### ls(): list of all assignments ls() ## [1] &quot;char_name&quot; &quot;this_is_a_long_name&quot; &quot;x&quot; ls.str() ## char_name : chr &quot;What is your name?&quot; ## this_is_a_long_name : num 125 ## x : num 5 #### check Environment in the upper right pane ### (atomic) vectors 5:10 ## [1] 5 6 7 8 9 10 a &lt;- seq(5,10) a ## [1] 5 6 7 8 9 10 b &lt;- 5:10 identical(a,b) ## [1] TRUE seq(5,10,2) # same ase seq(from = 5, to = 10, by = 2) ## [1] 5 7 9 c1 &lt;- seq(0,100, by = 10) c2 &lt;- seq(0,100, length.out = 10) c1 ## [1] 0 10 20 30 40 50 60 70 80 90 100 c2 ## [1] 0.00000 11.11111 22.22222 33.33333 44.44444 55.55556 66.66667 ## [8] 77.77778 88.88889 100.00000 length(c1) ## [1] 11 #### ? seq ? length ? identical (die &lt;- 1:6) ## [1] 1 2 3 4 5 6 zero_one &lt;- c(0,1) # same as 0:1 die + zero_one # c(1,2,3,4,5,6) + c(0,1). re-use ## [1] 1 3 3 5 5 7 d1 &lt;- rep(1:3,2) # repeat d1 ## [1] 1 2 3 1 2 3 die == d1 ## [1] TRUE TRUE TRUE FALSE FALSE FALSE d2 &lt;- as.character(die == d1) d2 ## [1] &quot;TRUE&quot; &quot;TRUE&quot; &quot;TRUE&quot; &quot;FALSE&quot; &quot;FALSE&quot; &quot;FALSE&quot; d3 &lt;- as.numeric(die == d1) d3 ## [1] 1 1 1 0 0 0 ### class() for class and typeof() for mode ### class of vectors: numeric, charcters, logical ### types of vectors: doubles, integers, characters, logicals (complex and raw) typeof(d1); class(d1) ## [1] &quot;integer&quot; ## [1] &quot;integer&quot; typeof(d2); class(d2) ## [1] &quot;character&quot; ## [1] &quot;character&quot; typeof(d3); class(d3) ## [1] &quot;double&quot; ## [1] &quot;numeric&quot; sqrt(2) ## [1] 1.414214 sqrt(2)^2 ## [1] 2 sqrt(2)^2 - 2 ## [1] 4.440892e-16 typeof(sqrt(2)) ## [1] &quot;double&quot; typeof(2) ## [1] &quot;double&quot; typeof(2L) ## [1] &quot;integer&quot; 5 == c(5) ## [1] TRUE length(5) ## [1] 1 ### Subsetting (A_Z &lt;- LETTERS) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; A_F &lt;- A_Z[1:6] A_F ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; A_F[3] ## [1] &quot;C&quot; A_F[c(3,5)] ## [1] &quot;C&quot; &quot;E&quot; large &lt;- die &gt; 3 large ## [1] FALSE FALSE FALSE TRUE TRUE TRUE even &lt;- die %in% c(2,4,6) even ## [1] FALSE TRUE FALSE TRUE FALSE TRUE A_F[large] ## [1] &quot;D&quot; &quot;E&quot; &quot;F&quot; A_F[even] ## [1] &quot;B&quot; &quot;D&quot; &quot;F&quot; A_F[die &lt; 4] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; ### Compare df with df1 &lt;- data.frame(number = die, alphabet = A_F) df &lt;- data.frame(number = die, alphabet = A_F, stringsAsFactors = FALSE) df ## number alphabet ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E ## 6 6 F df$number ## [1] 1 2 3 4 5 6 df$alphabet ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; df[3,2] ## [1] &quot;C&quot; df[4,1] ## [1] 4 df[1] ## number ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 class(df[1]) ## [1] &quot;data.frame&quot; class(df[[1]]) ## [1] &quot;integer&quot; identical(df[[1]], die) ## [1] TRUE identical(df[1],die) ## [1] FALSE #################### # The First Example #################### plot(cars) # Help ? cars # cars is in the &#39;datasets&#39; package data() # help(cars) does the same as ? cars # You can use Help tab in the right bottom pane help(plot) ## Help on topic &#39;plot&#39; was found in the following packages: ## ## Package Library ## graphics /Library/Frameworks/R.framework/Versions/4.2/Resources/library ## base /Library/Frameworks/R.framework/Resources/library ## ## ## Using the first match ... ? par head(cars) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 ## 4 7 22 ## 5 8 16 ## 6 9 10 str(cars) ## &#39;data.frame&#39;: 50 obs. of 2 variables: ## $ speed: num 4 4 7 7 8 9 10 10 10 11 ... ## $ dist : num 2 10 4 22 16 10 18 26 34 17 ... summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 x &lt;- cars$speed y &lt;- cars$dist min(x) ## [1] 4 mean(x) ## [1] 15.4 quantile(x) ## 0% 25% 50% 75% 100% ## 4 12 15 19 25 plot(cars) abline(lm(cars$dist ~ cars$speed)) summary(lm(cars$dist ~ cars$speed)) ## ## Call: ## lm(formula = cars$dist ~ cars$speed) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.069 -9.525 -2.272 9.215 43.201 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -17.5791 6.7584 -2.601 0.0123 * ## cars$speed 3.9324 0.4155 9.464 1.49e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 15.38 on 48 degrees of freedom ## Multiple R-squared: 0.6511, Adjusted R-squared: 0.6438 ## F-statistic: 89.57 on 1 and 48 DF, p-value: 1.49e-12 boxplot(cars) hist(cars$speed) hist(cars$dist) hist(cars$dist, breaks = seq(0,120, 10)) 2.1.13.3 Basic Reference An Introduction to R 2.2 Practicum: Swirl and more on R Script 2.2.1 Swirl: An interactive learning environment for R and statistics {swirl} website: https://swirlstats.com JHU Data Science in coursera uses swirl for exercises. 2.2.1.1 Swirl Courses R Programming: The basics of programming in R Regression Models: The basics of regression modeling in R Statistical Inference: The basics of statistical inference in R Exploratory Data Analysis: The basics of exploring data in R You can install other swirl courses as well Swirl Courses Organized by Title Swirl Courses Organized by Author’s Name Github: swirl courses install_course(\"Course Name Here\") 2.2.2 Install and Start Swirl Courses 2.2.2.1 Three Steps to Start Swirl install.packages(&quot;swirl&quot;) # Only the first time. library(swirl) # Everytime you start swirl swirl() # Everytime you start or resume swirl 2.2.2.2 R Programming: The basics of programming in R 1: Basic Building Blocks 2: Workspace and Files 3: Sequences of Numbers 4: Vectors 5: Missing Values 6: Subsetting Vectors 7: Matrices and Data Frames 8: Logic 9: Functions 10: lapply and sapply 11: vapply and tapply 12: Looking at Data 13: Simulation 14: Dates and Times 15: Base Graphics 2.2.2.3 Recommended Sections in Order 1, 3, 4, 5, 6, 7, 12, 15, 14, 8, 9, 10, 11, 13, 2 Section 2 discusses the directories and file systems of a computer Sections 9, 10, 11 are for programming 2.2.2.4 Controling a swirl Session … &lt;– That’s your cue to press Enter to continue You can exit swirl and return to the R prompt (&gt;) at any time by pressing the Esc key. If you are already at the prompt, type bye() to exit and save your progress. When you exit properly, you’ll see a short message letting you know you’ve done so. When you are at the R prompt (&gt;): Typing skip() allows you to skip the current question. Typing play() lets you experiment with R on your own; swirl will ignore what you do… UNTIL you type nxt() which will regain swirl’s attention. Typing bye() causes swirl to exit. Your progress will be saved. Typing main() returns you to swirl’s main menu. Typing info() displays these options again. 2.2.3 The First EDA using coronavirus.R Pre-installed datasets R Script To access shortcuts, type Option + Shift + K on a Mac, or Alt + Shift + K on Linux and Windows. EDA (A diagram from R4DS by H.W. and G.G.) 2.2.4 Basics of Fundamentals of Statistics 2.2.4.1 R Commands Related to R Basics Fundamentals of Statistics: statistical measurements such as mean: mean() or mean(x, na.rm = TRUE) median: median() or median(x, na.rm = TRUE) quantile: quantile() or quantile(x, na.rm = TRUE) variance: var() or var(x, na.rm = TRUE) standard deviation: sd() covariance: cov() correlation: cor() summary() 2.2.5 Summary 2.2.5.1 Please check the following Installation of R Installation of R Studio Login to RStudio.cloud swirl: R Programming Try 1, 3, 4, 5, 6, 7, 12, 15 R Script basics.R - try similar commands coronavirus.R - try different Regions and Periods 2.2.5.2 coronavirus.R The script and its outputs. coronavirus.csv is too large # https://coronavirus.jhu.edu/map.html # JHU Covid-19 global time series data # See R pakage coronavirus at: https://github.com/RamiKrispin/coronavirus # Data taken from: https://github.com/RamiKrispin/coronavirus/tree/master/csv # Last Updated Sys.Date() ## [1] &quot;2022-10-10&quot; ## Download and read csv (comma separated value) file coronavirus &lt;- read.csv(&quot;https://github.com/RamiKrispin/coronavirus/raw/master/csv/coronavirus.csv&quot;) # write.csv(coronavirus, &quot;data/coronavirus.csv&quot;) ## Summaries and structures of the data head(coronavirus) ## date province country lat long type cases uid iso2 iso3 ## 1 2020-01-22 Alberta Canada 53.9333 -116.5765 confirmed 0 12401 CA CAN ## 2 2020-01-23 Alberta Canada 53.9333 -116.5765 confirmed 0 12401 CA CAN ## 3 2020-01-24 Alberta Canada 53.9333 -116.5765 confirmed 0 12401 CA CAN ## 4 2020-01-25 Alberta Canada 53.9333 -116.5765 confirmed 0 12401 CA CAN ## 5 2020-01-26 Alberta Canada 53.9333 -116.5765 confirmed 0 12401 CA CAN ## 6 2020-01-27 Alberta Canada 53.9333 -116.5765 confirmed 0 12401 CA CAN ## code3 combined_key population continent_name continent_code ## 1 124 Alberta, Canada 4413146 North America &lt;NA&gt; ## 2 124 Alberta, Canada 4413146 North America &lt;NA&gt; ## 3 124 Alberta, Canada 4413146 North America &lt;NA&gt; ## 4 124 Alberta, Canada 4413146 North America &lt;NA&gt; ## 5 124 Alberta, Canada 4413146 North America &lt;NA&gt; ## 6 124 Alberta, Canada 4413146 North America &lt;NA&gt; str(coronavirus) ## &#39;data.frame&#39;: 845184 obs. of 15 variables: ## $ date : chr &quot;2020-01-22&quot; &quot;2020-01-23&quot; &quot;2020-01-24&quot; &quot;2020-01-25&quot; ... ## $ province : chr &quot;Alberta&quot; &quot;Alberta&quot; &quot;Alberta&quot; &quot;Alberta&quot; ... ## $ country : chr &quot;Canada&quot; &quot;Canada&quot; &quot;Canada&quot; &quot;Canada&quot; ... ## $ lat : num 53.9 53.9 53.9 53.9 53.9 ... ## $ long : num -117 -117 -117 -117 -117 ... ## $ type : chr &quot;confirmed&quot; &quot;confirmed&quot; &quot;confirmed&quot; &quot;confirmed&quot; ... ## $ cases : int 0 0 0 0 0 0 0 0 0 0 ... ## $ uid : int 12401 12401 12401 12401 12401 12401 12401 12401 12401 12401 ... ## $ iso2 : chr &quot;CA&quot; &quot;CA&quot; &quot;CA&quot; &quot;CA&quot; ... ## $ iso3 : chr &quot;CAN&quot; &quot;CAN&quot; &quot;CAN&quot; &quot;CAN&quot; ... ## $ code3 : int 124 124 124 124 124 124 124 124 124 124 ... ## $ combined_key : chr &quot;Alberta, Canada&quot; &quot;Alberta, Canada&quot; &quot;Alberta, Canada&quot; &quot;Alberta, Canada&quot; ... ## $ population : num 4413146 4413146 4413146 4413146 4413146 ... ## $ continent_name: chr &quot;North America&quot; &quot;North America&quot; &quot;North America&quot; &quot;North America&quot; ... ## $ continent_code: chr NA NA NA NA ... coronavirus$date &lt;- as.Date(coronavirus$date) str(coronavirus) ## &#39;data.frame&#39;: 845184 obs. of 15 variables: ## $ date : Date, format: &quot;2020-01-22&quot; &quot;2020-01-23&quot; ... ## $ province : chr &quot;Alberta&quot; &quot;Alberta&quot; &quot;Alberta&quot; &quot;Alberta&quot; ... ## $ country : chr &quot;Canada&quot; &quot;Canada&quot; &quot;Canada&quot; &quot;Canada&quot; ... ## $ lat : num 53.9 53.9 53.9 53.9 53.9 ... ## $ long : num -117 -117 -117 -117 -117 ... ## $ type : chr &quot;confirmed&quot; &quot;confirmed&quot; &quot;confirmed&quot; &quot;confirmed&quot; ... ## $ cases : int 0 0 0 0 0 0 0 0 0 0 ... ## $ uid : int 12401 12401 12401 12401 12401 12401 12401 12401 12401 12401 ... ## $ iso2 : chr &quot;CA&quot; &quot;CA&quot; &quot;CA&quot; &quot;CA&quot; ... ## $ iso3 : chr &quot;CAN&quot; &quot;CAN&quot; &quot;CAN&quot; &quot;CAN&quot; ... ## $ code3 : int 124 124 124 124 124 124 124 124 124 124 ... ## $ combined_key : chr &quot;Alberta, Canada&quot; &quot;Alberta, Canada&quot; &quot;Alberta, Canada&quot; &quot;Alberta, Canada&quot; ... ## $ population : num 4413146 4413146 4413146 4413146 4413146 ... ## $ continent_name: chr &quot;North America&quot; &quot;North America&quot; &quot;North America&quot; &quot;North America&quot; ... ## $ continent_code: chr NA NA NA NA ... range(coronavirus$date) ## [1] &quot;2020-01-22&quot; &quot;2022-10-09&quot; unique(coronavirus$country) ## [1] &quot;Canada&quot; &quot;United Kingdom&quot; ## [3] &quot;China&quot; &quot;Netherlands&quot; ## [5] &quot;Australia&quot; &quot;New Zealand&quot; ## [7] &quot;Denmark&quot; &quot;France&quot; ## [9] &quot;Afghanistan&quot; &quot;Albania&quot; ## [11] &quot;Algeria&quot; &quot;Andorra&quot; ## [13] &quot;Angola&quot; &quot;Antarctica&quot; ## [15] &quot;Antigua and Barbuda&quot; &quot;Argentina&quot; ## [17] &quot;Armenia&quot; &quot;Austria&quot; ## [19] &quot;Azerbaijan&quot; &quot;Bahamas&quot; ## [21] &quot;Bahrain&quot; &quot;Bangladesh&quot; ## [23] &quot;Barbados&quot; &quot;Belarus&quot; ## [25] &quot;Belgium&quot; &quot;Belize&quot; ## [27] &quot;Benin&quot; &quot;Bhutan&quot; ## [29] &quot;Bolivia&quot; &quot;Bosnia and Herzegovina&quot; ## [31] &quot;Botswana&quot; &quot;Brazil&quot; ## [33] &quot;Brunei&quot; &quot;Bulgaria&quot; ## [35] &quot;Burkina Faso&quot; &quot;Burma&quot; ## [37] &quot;Burundi&quot; &quot;Cabo Verde&quot; ## [39] &quot;Cambodia&quot; &quot;Cameroon&quot; ## [41] &quot;Central African Republic&quot; &quot;Chad&quot; ## [43] &quot;Chile&quot; &quot;Colombia&quot; ## [45] &quot;Comoros&quot; &quot;Congo (Brazzaville)&quot; ## [47] &quot;Congo (Kinshasa)&quot; &quot;Costa Rica&quot; ## [49] &quot;Cote d&#39;Ivoire&quot; &quot;Croatia&quot; ## [51] &quot;Cuba&quot; &quot;Cyprus&quot; ## [53] &quot;Czechia&quot; &quot;Diamond Princess&quot; ## [55] &quot;Djibouti&quot; &quot;Dominica&quot; ## [57] &quot;Dominican Republic&quot; &quot;Ecuador&quot; ## [59] &quot;Egypt&quot; &quot;El Salvador&quot; ## [61] &quot;Equatorial Guinea&quot; &quot;Eritrea&quot; ## [63] &quot;Estonia&quot; &quot;Eswatini&quot; ## [65] &quot;Ethiopia&quot; &quot;Fiji&quot; ## [67] &quot;Finland&quot; &quot;Gabon&quot; ## [69] &quot;Gambia&quot; &quot;Georgia&quot; ## [71] &quot;Germany&quot; &quot;Ghana&quot; ## [73] &quot;Greece&quot; &quot;Grenada&quot; ## [75] &quot;Guatemala&quot; &quot;Guinea&quot; ## [77] &quot;Guinea-Bissau&quot; &quot;Guyana&quot; ## [79] &quot;Haiti&quot; &quot;Holy See&quot; ## [81] &quot;Honduras&quot; &quot;Hungary&quot; ## [83] &quot;Iceland&quot; &quot;India&quot; ## [85] &quot;Indonesia&quot; &quot;Iran&quot; ## [87] &quot;Iraq&quot; &quot;Ireland&quot; ## [89] &quot;Israel&quot; &quot;Italy&quot; ## [91] &quot;Jamaica&quot; &quot;Japan&quot; ## [93] &quot;Jordan&quot; &quot;Kazakhstan&quot; ## [95] &quot;Kenya&quot; &quot;Kiribati&quot; ## [97] &quot;Korea, North&quot; &quot;Korea, South&quot; ## [99] &quot;Kosovo&quot; &quot;Kuwait&quot; ## [101] &quot;Kyrgyzstan&quot; &quot;Laos&quot; ## [103] &quot;Latvia&quot; &quot;Lebanon&quot; ## [105] &quot;Lesotho&quot; &quot;Liberia&quot; ## [107] &quot;Libya&quot; &quot;Liechtenstein&quot; ## [109] &quot;Lithuania&quot; &quot;Luxembourg&quot; ## [111] &quot;Madagascar&quot; &quot;Malawi&quot; ## [113] &quot;Malaysia&quot; &quot;Maldives&quot; ## [115] &quot;Mali&quot; &quot;Malta&quot; ## [117] &quot;Marshall Islands&quot; &quot;Mauritania&quot; ## [119] &quot;Mauritius&quot; &quot;Mexico&quot; ## [121] &quot;Micronesia&quot; &quot;Moldova&quot; ## [123] &quot;Monaco&quot; &quot;Mongolia&quot; ## [125] &quot;Montenegro&quot; &quot;Morocco&quot; ## [127] &quot;Mozambique&quot; &quot;MS Zaandam&quot; ## [129] &quot;Namibia&quot; &quot;Nauru&quot; ## [131] &quot;Nepal&quot; &quot;Nicaragua&quot; ## [133] &quot;Niger&quot; &quot;Nigeria&quot; ## [135] &quot;North Macedonia&quot; &quot;Norway&quot; ## [137] &quot;Oman&quot; &quot;Pakistan&quot; ## [139] &quot;Palau&quot; &quot;Panama&quot; ## [141] &quot;Papua New Guinea&quot; &quot;Paraguay&quot; ## [143] &quot;Peru&quot; &quot;Philippines&quot; ## [145] &quot;Poland&quot; &quot;Portugal&quot; ## [147] &quot;Qatar&quot; &quot;Romania&quot; ## [149] &quot;Russia&quot; &quot;Rwanda&quot; ## [151] &quot;Saint Kitts and Nevis&quot; &quot;Saint Lucia&quot; ## [153] &quot;Saint Vincent and the Grenadines&quot; &quot;Samoa&quot; ## [155] &quot;San Marino&quot; &quot;Sao Tome and Principe&quot; ## [157] &quot;Saudi Arabia&quot; &quot;Senegal&quot; ## [159] &quot;Serbia&quot; &quot;Seychelles&quot; ## [161] &quot;Sierra Leone&quot; &quot;Singapore&quot; ## [163] &quot;Slovakia&quot; &quot;Slovenia&quot; ## [165] &quot;Solomon Islands&quot; &quot;Somalia&quot; ## [167] &quot;South Africa&quot; &quot;South Sudan&quot; ## [169] &quot;Spain&quot; &quot;Sri Lanka&quot; ## [171] &quot;Sudan&quot; &quot;Summer Olympics 2020&quot; ## [173] &quot;Suriname&quot; &quot;Sweden&quot; ## [175] &quot;Switzerland&quot; &quot;Syria&quot; ## [177] &quot;Taiwan*&quot; &quot;Tajikistan&quot; ## [179] &quot;Tanzania&quot; &quot;Thailand&quot; ## [181] &quot;Timor-Leste&quot; &quot;Togo&quot; ## [183] &quot;Tonga&quot; &quot;Trinidad and Tobago&quot; ## [185] &quot;Tunisia&quot; &quot;Turkey&quot; ## [187] &quot;Tuvalu&quot; &quot;Uganda&quot; ## [189] &quot;Ukraine&quot; &quot;United Arab Emirates&quot; ## [191] &quot;Uruguay&quot; &quot;US&quot; ## [193] &quot;Uzbekistan&quot; &quot;Vanuatu&quot; ## [195] &quot;Venezuela&quot; &quot;Vietnam&quot; ## [197] &quot;West Bank and Gaza&quot; &quot;Winter Olympics 2022&quot; ## [199] &quot;Yemen&quot; &quot;Zambia&quot; ## [201] &quot;Zimbabwe&quot; unique(coronavirus$type) ## [1] &quot;confirmed&quot; &quot;death&quot; &quot;recovery&quot; ## Set Country COUNTRY &lt;- &quot;Japan&quot; df0 &lt;- coronavirus[coronavirus$country == COUNTRY,] head(df0) ## date province country lat long type cases uid iso2 ## 174593 2020-01-22 &lt;NA&gt; Japan 36.20482 138.2529 confirmed 2 392 JP ## 174594 2020-01-23 &lt;NA&gt; Japan 36.20482 138.2529 confirmed 0 392 JP ## 174595 2020-01-24 &lt;NA&gt; Japan 36.20482 138.2529 confirmed 0 392 JP ## 174596 2020-01-25 &lt;NA&gt; Japan 36.20482 138.2529 confirmed 0 392 JP ## 174597 2020-01-26 &lt;NA&gt; Japan 36.20482 138.2529 confirmed 2 392 JP ## 174598 2020-01-27 &lt;NA&gt; Japan 36.20482 138.2529 confirmed 0 392 JP ## iso3 code3 combined_key population continent_name continent_code ## 174593 JPN 392 Japan 126476458 Asia AS ## 174594 JPN 392 Japan 126476458 Asia AS ## 174595 JPN 392 Japan 126476458 Asia AS ## 174596 JPN 392 Japan 126476458 Asia AS ## 174597 JPN 392 Japan 126476458 Asia AS ## 174598 JPN 392 Japan 126476458 Asia AS tail(df0) ## date province country lat long type cases uid iso2 ## 734075 2022-10-04 &lt;NA&gt; Japan 36.20482 138.2529 recovery 0 392 JP ## 734076 2022-10-05 &lt;NA&gt; Japan 36.20482 138.2529 recovery 0 392 JP ## 734077 2022-10-06 &lt;NA&gt; Japan 36.20482 138.2529 recovery 0 392 JP ## 734078 2022-10-07 &lt;NA&gt; Japan 36.20482 138.2529 recovery 0 392 JP ## 734079 2022-10-08 &lt;NA&gt; Japan 36.20482 138.2529 recovery 0 392 JP ## 734080 2022-10-09 &lt;NA&gt; Japan 36.20482 138.2529 recovery 0 392 JP ## iso3 code3 combined_key population continent_name continent_code ## 734075 JPN 392 Japan 126476458 Asia AS ## 734076 JPN 392 Japan 126476458 Asia AS ## 734077 JPN 392 Japan 126476458 Asia AS ## 734078 JPN 392 Japan 126476458 Asia AS ## 734079 JPN 392 Japan 126476458 Asia AS ## 734080 JPN 392 Japan 126476458 Asia AS (pop &lt;- df0$population[1]) ## [1] 126476458 df &lt;- df0[c(1,6,7,13)] str(df) ## &#39;data.frame&#39;: 2976 obs. of 4 variables: ## $ date : Date, format: &quot;2020-01-22&quot; &quot;2020-01-23&quot; ... ## $ type : chr &quot;confirmed&quot; &quot;confirmed&quot; &quot;confirmed&quot; &quot;confirmed&quot; ... ## $ cases : int 2 0 0 0 2 0 3 0 4 4 ... ## $ population: num 1.26e+08 1.26e+08 1.26e+08 1.26e+08 1.26e+08 ... head(df) ## date type cases population ## 174593 2020-01-22 confirmed 2 126476458 ## 174594 2020-01-23 confirmed 0 126476458 ## 174595 2020-01-24 confirmed 0 126476458 ## 174596 2020-01-25 confirmed 0 126476458 ## 174597 2020-01-26 confirmed 2 126476458 ## 174598 2020-01-27 confirmed 0 126476458 ### alternatively, head(df0[c(&quot;date&quot;, &quot;type&quot;, &quot;cases&quot;, &quot;population&quot;)]) ## date type cases population ## 174593 2020-01-22 confirmed 2 126476458 ## 174594 2020-01-23 confirmed 0 126476458 ## 174595 2020-01-24 confirmed 0 126476458 ## 174596 2020-01-25 confirmed 0 126476458 ## 174597 2020-01-26 confirmed 2 126476458 ## 174598 2020-01-27 confirmed 0 126476458 ### ## Set types df_confirmed &lt;- df[df$type == &quot;confirmed&quot;,] df_death &lt;- df[df$type == &quot;death&quot;,] df_recovery &lt;- df[df$data_type == &quot;recovery&quot;,] head(df_confirmed) ## date type cases population ## 174593 2020-01-22 confirmed 2 126476458 ## 174594 2020-01-23 confirmed 0 126476458 ## 174595 2020-01-24 confirmed 0 126476458 ## 174596 2020-01-25 confirmed 0 126476458 ## 174597 2020-01-26 confirmed 2 126476458 ## 174598 2020-01-27 confirmed 0 126476458 head(df_death) ## date type cases population ## 461281 2020-01-22 death 0 126476458 ## 461282 2020-01-23 death 0 126476458 ## 461283 2020-01-24 death 0 126476458 ## 461284 2020-01-25 death 0 126476458 ## 461285 2020-01-26 death 0 126476458 ## 461286 2020-01-27 death 0 126476458 head(df_recovery) ## [1] date type cases population ## &lt;0 rows&gt; (or 0-length row.names) ## Histogram plot(df_confirmed$date, df_confirmed$cases, type = &quot;h&quot;) plot(df_death$date, df_death$cases, type = &quot;h&quot;) # plot(df_recovered$date, df_recovered$cases, type = &quot;h&quot;) # no data for recovery ## Scatter plot and correlation plot(df_confirmed$cases, df_death$cases, type = &quot;p&quot;) cor(df_confirmed$cases, df_death$cases) ## [1] 0.7128397 ## In addition set a period start_date &lt;- as.Date(&quot;2021-07-01&quot;) end_date &lt;- Sys.Date() df_date &lt;- df[df$date &gt;=start_date &amp; df$date &lt;= end_date,] ## ## Set types df_date_confirmed &lt;- df_date[df_date$type == &quot;confirmed&quot;,] df_date_death &lt;- df_date[df_date$type == &quot;death&quot;,] df_date_recovery &lt;- df_date[df_date$data_type == &quot;recovery&quot;,] head(df_date_confirmed) ## date type cases population ## 175119 2021-07-01 confirmed 1754 126476458 ## 175120 2021-07-02 confirmed 1775 126476458 ## 175121 2021-07-03 confirmed 1878 126476458 ## 175122 2021-07-04 confirmed 1485 126476458 ## 175123 2021-07-05 confirmed 1029 126476458 ## 175124 2021-07-06 confirmed 1668 126476458 head(df_date_death) ## date type cases population ## 461807 2021-07-01 death 24 126476458 ## 461808 2021-07-02 death 25 126476458 ## 461809 2021-07-03 death 9 126476458 ## 461810 2021-07-04 death 6 126476458 ## 461811 2021-07-05 death 19 126476458 ## 461812 2021-07-06 death 22 126476458 head(df_date_recovery) ## [1] date type cases population ## &lt;0 rows&gt; (or 0-length row.names) ## Histogram plot(df_date_confirmed$date, df_date_confirmed$cases, type = &quot;h&quot;) plot(df_date_death$date, df_date_death$cases, type = &quot;h&quot;) # plot(df_date_recovered$date, df_date_recovered$cases, type = &quot;h&quot;) # no data for recovery plot(df_date_confirmed$cases, df_date_death$cases, type = &quot;p&quot;) cor(df_date_confirmed$cases, df_date_death$cases) ## [1] 0.7288534 ### Q0. Change the values of the location and the period and see the outcomes. ### Q1. What is the correlation between df_confirmed$cases and df_death$cases? ### Q2. Do we have a larger correlation value if we shift the dates to implement the time-lag? ### Q3. Do you have any other questions to explore? #### Extra plot(df_confirmed$date, df_confirmed$cases, type = &quot;h&quot;, main = paste(&quot;Comfirmed Cases in&quot;,COUNTRY), xlab = &quot;Date&quot;, ylab = &quot;Number of Cases&quot;) 2.2.5.3 Assignment 1 and Assignment 2: Questions and a Quiz in Moodle Please complete assignments in Moodle by 2021-12-21 "]]
